#! /usr/bin/env bash
#
# rfc
#
# Author: Baptiste Fontaine
# License: MIT
# Version: 0.1.0
#
# URI: github.com/bfontaine/rfc
#

__rfc() {

    local VERSION='0.1.0'
    local COMMIT=''
    local PAGER=${PAGER:-less}
    local fetch_cmd='curl'
    local rfc_dir="$HOME/.RFCs"
    local code=

    # Error codes
    local NOT_FOUND=1
    local UNRECOGNIZED_CMD=2
    local NETWORK_ERROR=3
    local NO_CURL_WGET=4

    # URLs
    local GITHUB_HEAD_URL="\
https://api.github.com/repos/bfontaine/rfc/git/refs/heads/master"
    local RFC_REMOTE_URL='https://raw.github.com/bfontaine/rfc/master/rfc'
    local REPO_HOME='https://github.com/bfontaine/rfc'
    local RFCS_BASEURL='http://www.rfc-editor.org/rfc/'

    print_rfc() {
        $PAGER "$rfc_dir/$1"
    }

    fetch_url() {
        case $fetch_cmd in
            curl)
                curl -fs "$1" > "$2";
                case "$?" in
                    6|7) return $NETWORK_ERROR ;;
                    22)  return $NOT_FOUND ;;
                    *)   return 0 ;;
                esac ;;

            wget)
                wget -q "$1" -O "$2";
                case "$?" in
                    4) return $NETWORK_ERROR ;;
                    8) return $NOT_FOUND ;;
                    *) return 0 ;;
                esac ;;
        esac
    }

    get_rfc() {
        fetch_url "$RFCS_BASEURL/rfc${1}.txt" "$rfc_dir/${1}"
        return $?
    }

    init_rfc_dir() {

        mkdir -p $rfc_dir
        touch $rfc_dir/_404s

    }

    update() {

        local new_commit=
        local actual=
        local tmp='._rfc_tmp'

        fetch_url $GITHUB_HEAD_URL $tmp

        local new_commit=$(grep '"sha"' $tmp | sed 's/.*"\([0-9a-z]\{8\}\).*,/\1/')
        local actual=''

        if [ "$COMMIT" = "$new_commit" ]; then
            echo 'This version is up to date!'
            return 0
        fi

        if [ "$COMMIT" != "" ]; then
            actual="from $COMMIT "
        fi

        fetch_url $RFC_REMOTE_URL $tmp

        \cp "$0" "/tmp/$0.bak" 2>/dev/null # Backup
        sed "s/COMMIT='[0-9a-z]*'/COMMIT='$new_commit'/" $tmp > "$0"
        chmod +x "$0"
        rm -f $tmp

        echo "'rfc' updated ${actual}to $new_commit."
        return 0
    }

    print_usage() {
        echo 'Usage:
    rfc --version # display the version number and exit
    rfc --help    # display this text and exit

    rfc <number>  # display the RFC <number>
    rfc update    # Update the script
    rfc search X  # Search for `X` in all cached RFCs
    rfc clear     # clear the cache'
    }

    print_version() {
        local commit=
        if [ "$COMMIT" != "" ]; then
            commit="[$COMMIT] "
        fi

        echo "rfc v$VERSION $commit- $REPO_HOME"
    }

    ###

    if [ $# -eq 0 ]; then
        print_usage
        return 0
    fi

    which curl > /dev/null 2>&1
    if [ $? -ne 0 ]; then
        which wget > /dev/null 2>&1

        if [ $? -ne 0 ]; then
            echo "Error: You need Wget or cURL!"
            return $NO_CURL_WGET;
        fi

        fetch_cmd='wget'

    fi

    init_rfc_dir

    case "$1" in

        -v|--version|version)
            print_version
            return 0;;

        -h|--help|-help|help)
            print_usage
            return 0;;

        -*)
            echo "Unrecognized option: $1"
            print_usage
            return $UNRECOGNIZED_CMD;;

        clear)
            rm -rf $rfc_dir
            return 0;;

        up|update)
            update
            return 0;;

        search)
            if [ "$2" = "" ]; then
                echo 'Usage: rfc search "<pattern>"'
                return $UNRECOGNIZED_CMD;
            fi
            grep -Is --exclude _404s "$2" $rfc_dir/* | sed "s%$rfc_dir/%RFC %"
            return 0;;

        _404s)
            print_usage
            return 1;;

        *)
        grep -q "^$1\$" $rfc_dir/_404s 2> /dev/null
        if [ $? -eq 0 ]; then

            echo "There's no such RFC."
            return $NOT_FOUND

        elif [ ! -f "$rfc_dir/$1" ]; then

            get_rfc $1

            code=$?

            if [ $code -eq $NETWORK_ERROR ]; then
                echo "Unable to connect to the network."
                [ ! -s "$rfc_dir/$1" ] && rm -f "$rfc_dir/$1"
                return $NETWORK_ERROR
            fi

            if [ $code -eq $NOT_FOUND ]; then
                echo "$1" >> "$rfc_dir/_404s"
                echo "There's no such RFC."

                [ ! -s "$rfc_dir/$1" ] && rm -f "$rfc_dir/$1"

                return $NOT_FOUND
            fi

        fi
    
        print_rfc $* ;;
    esac

}

__rfc $*

